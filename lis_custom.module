<?php
/**
 * Module to hold custom LegumeInfo code.
 */

 
/**
 * Implements hook_blast_linkout_info().
 *
 * Set custom BLAST linkouts here. These will be added to the default linkout
 * types available on the "Blast Database" admin page.
 *
 */
function lis_custom_blast_linkout_info() {
  $types = array();
  
  $types['lis_gbrowse'] = array(
    'name' => 'LegumeInfo GBrowse',
    'process function' => 'tripal_custom_generate_lis_gbrowse_linkout',
    'require_regex' => TRUE,
  );
  
  return $types;
}


/**
 * The function called when determining linkouts for blast databases 
 * with a linkout type of 'PeanutBase GBrowse'.
 */
function tripal_custom_generate_lis_gbrowse_linkout($url_prefix, $hit, $info, $options = array()) {

  $url          = false;
  $blastdb_name = NULL;
  $hit_name     = $hit->{'hit_name'};
  $regex        = $info['RegEx'];

  if ($info['Target'] == 'All genomes' || stristr($info['Target'], 'genome')) {
    if (preg_match('/^aradu/', $hit_name) == 1) {
      $blastdb_name = 'PeanutBase_aradu_gbrowse';
    }
    else if (preg_match('/^arahy/', $hit_name) == 1) {
      $blastdb_name = 'PeanutBase_arahy_gbrowse';
    }
    else if (preg_match('/^araip/', $hit_name) == 1) {
      $blastdb_name = 'PeanutBase_araip_gbrowse';
    }
    else if (preg_match('/^cajca/', $hit_name) == 1) {
      $blastdb_name = 'LegumeInfo_cajca_gbrowse';
    }
    else if (preg_match('/^cicar/', $hit_name) == 1) {
      if (strstr($hit_name, 'ICC4958')) {
        // remove line name
        $hit_name = str_replace(".ICC4958", "", $hit_name);
        if (strstr($hit_name, 'scaffold')) {
          $regex = "/^(cicar.\w+).*/";
        }
        $blastdb_name = 'LegumeInfo_cicar_ICC4958_gbrowse';
      }
      else if (strstr($hit_name, 'CDCFrontier')) {
        $regex = "/^\w+\.\w+\.\w+\.(\S+).*/";
        $blastdb_name = 'LegumeInfo_cicar_CDCFrontier_gbrowse';
      }
    }
    else if (preg_match('/^glyma/', $hit_name) == 1) {
      $blastdb_name = 'SoyBase_glyma_gbrowse';
    }
    else if (preg_match('/^lotja/', $hit_name) == 1) {
      if (preg_match("/(lotja\..*)_Lj\d/", $hit_name, $matches)) {
        $hit_name = $matches[1];
        $blastdb_name = 'LegumeInfo_lotja2.5_gbrowse';
      }
      else {
        $blastdb_name = 'LegumeInfo_lotja_gbrowse';
      }
    }
    else if (preg_match('/^lupan/', $hit_name) == 1) {
      $blastdb_name = 'LegumeInfo_lupan_gbrowse';
    }
    else if (preg_match('/^medtr/', $hit_name) == 1) {
      $blastdb_name = 'LegumeInfo_medtr_gbrowse';
    }
    else if (preg_match('/^phavu/', $hit_name) == 1) {
      $blastdb_name = 'LegumeInfo_phavu_gbrowse';
    }
    else if (preg_match('/^tripr/', $hit_name) == 1) {
      $blastdb_name = 'LegumeInfo_tripr_gbrowse';
    }
    else if (preg_match('/^vigan/', $hit_name) == 1) {
      $blastdb_name = 'LegumeInfo_vigan_gbrowse';
      if (stristr($hit_name, 'scaf')) {
        $regex = "/(.*)/";
      }
    }
    else if (preg_match('/^vigra/', $hit_name) == 1) {
      $blastdb_name = 'LegumeInfo_vigra_gbrowse';
    }
    else if (preg_match('/^vigun/', $hit_name) == 1) {
      $blastdb_name = 'LegumeInfo_vigun_gbrowse';
    }
    else {
      // Don't know what to do with this hit
      drupal_set_message("Don't know how to create GBrowse linkout for '$hit_name'", 'error');
      drupal_set_message(print_r($hit, true) . "\n\n");
    }  

    $hit_name = preg_replace($regex, '$1', $hit_name);
    $hit->{'linkout_id'} = $hit_name;
    if ($blastdb_info = tripal_custom_getBLASTdbinfo($blastdb_name)) {
      $url = lis_custom_generate_linkout_gbrowse($blastdb_info['urlprefix'], $hit, $info, $options);
    }
  }//all-genomes
  
  else {
    if (preg_match('/^aradu/', $hit_name) == 1) {
      $blastdb_name = 'PeanutBase_aradu_gene';
    }
    else if (preg_match('/^arahy/', $hit_name) == 1) {
      $blastdb_name = 'PeanutBase_arahy_Tifrunner_gene';
    }
    else if (preg_match('/^araip/', $hit_name) == 1) {
      $blastdb_name = 'PeanutBase_araip_gene';
    }
    else if (preg_match('/^cajca/', $hit_name) == 1) {
      $blastdb_name = 'LegumeInfo_cajca_gene';
    }
    else if (preg_match('/^cicar/', $hit_name) == 1) {
      if (strstr($hit_name, 'ICC4958')) {
        $regex = "/^(cicar.\w+\.\w+)\.*.*/";
        $blastdb_name = 'LegumeInfo_cicar_ICC4958_gene';
      }
      else {
        $regex = "/^cicar\.(\S+).*/";
        $blastdb_name = 'LegumeInfo_cicar_CDCFrontier_gene';
      }
    }
    else if (preg_match('/^glyma/', $hit_name) == 1) {
      $blastdb_name = 'LegumeInfo_glyma_gene';
      if (preg_match("/^\w+\.(\S+)\.p/", $hit_name)) {
        //glyma protein
        $regex = "/^\w+\.(\S+)\.p/";
      }
    }
    else if (preg_match('/^lotja/', $hit_name) == 1) {
      if (preg_match("/(lotja\..*)_Lj\d/", $hit_name, $matches)) {
        $hit_name = $matches[1];
        $blastdb_name = 'LegumeInfo_lotja2.5_gene';
      }
      else {
        $blastdb_name = 'LegumeInfo_lotja_gene';
      }
    }
    else if (preg_match('/^lupan/', $hit_name) == 1) {
      $regex = "/^\w+\.(\w+)\.*.*/";
      $blastdb_name = 'LegumeInfo_lupan_gene';
    }
    else if (preg_match('/^medtr/', $hit_name) == 1) {
      $blastdb_name = 'LegumeInfo_medtr_gene';
    }
    else if (preg_match('/^phavu/', $hit_name) == 1) {
      $blastdb_name = 'LegumeInfo_phavu_gene';
    }
    else if (preg_match('/^tripr/', $hit_name) == 1) {
      $blastdb_name = 'LegumeInfo_tripr_gene';
    }
    else if (preg_match('/^vigan/', $hit_name) == 1) {
      $blastdb_name = 'LegumeInfo_vigan_genes';
    }
    else if (preg_match('/^vigra/', $hit_name) == 1) {
      $blastdb_name = 'LegumeInfo_vigra_gene';
    }
    else if (preg_match('/^vigun/', $hit_name) == 1) {
      $blastdb_name = 'LegumeInfo_vigun_gene';
    }
    else {
      // Don't know what to do with this hit
      drupal_set_message("Don't know how to create linkout for '$hit_name'", 'error');
    }  

    preg_match($regex, $hit_name, $matches);
    if (isset($matches[1])) {
      $hit->{'linkout_id'} = $matches[1];
    }
    if ($blastdb_name AND $blastdb_info = tripal_custom_getBLASTdbinfo($blastdb_name)) {
      $url = lis_custom_generate_linkout_gene_gbrowse($blastdb_info['urlprefix'], $hit, $info, $options);
    }
  }//all-gene-links

  return $url;
}//tripal_custom_generate_lis_gbrowse_linkout



/**
 * Retrieves the url prefix for a blast database based on it's name.
 */
function tripal_custom_getBLASTdbinfo($blastdb_name) {

  $sql = "
    SELECT urlprefix 
    FROM {db} WHERE name='$blastdb_name'";
  if ($res = chado_query($sql)) {
    if ($row=$res->fetchObject()) {
      return array(
        'urlprefix' => $row->urlprefix, 
      );
    }
  }
  
  return false;
}


function lis_custom_generate_linkout_gbrowse($url_prefix, $hit, $info) {
  $range_info = lis_custom_getHSPranges($info['HSPs'], 0);
  $ranges = $range_info['ranges'];
  $coords = $range_info['coords'];
  
  // Calculate the minimum & maximum coordinates.
  $min = min($coords);
  $max = max($coords);

  // Build the link brute force until/unless someone figures out how to prevent
  //   l() from URL-encoding the sub-parameters to "query=".
  $query = "q=".$hit->{'linkout_id'}.":$min..$max";
  $query .= ";add=".$hit->{'linkout_id'}."+BLAST+BlastHit=" . join ("," , $ranges);
  $query .= ";h_feat=BlastHit";
  $url = "<a href=\"$url_prefix$query\">" . $hit->{'linkout_id'} . "</a>";
  
  return $url;
}//lis_custom_generate_linkout_gbrowse


function lis_custom_generate_linkout_gene_gbrowse($url_prefix, $hit, $info) {

  // Hit positions will be relative to the gene model, so adjust to genome position
  preg_match("/^\w+\./", $hit->{'hit_name'}, $prefix);
  $position = lis_custom_getGenePosition($prefix[0], $hit->{'linkout_id'});
  
  $range_info = lis_custom_getHSPranges($info['HSPs'], $position['start']);
  $ranges = $range_info['ranges'];
  $coords = $range_info['coords'];
  
  // Build the link brute force until/unless someone figures out how to prevent
  //   l() from URL-encoding the sub-parameters to "query=".
  $query = $hit->{'linkout_id'};
  $query .= ";add=".$position['chr']."+BLAST+BlastHit=" . join ("," , $ranges);
  $query .= ";h_feat=BlastHit";
  $url = "<a href=\"$url_prefix$query\">" . $hit->{'linkout_id'} . "</a>";
  
  return $url;
}//lis_custom_generate_linkout_gene_gbrowse


function lis_custom_getHSPranges($hsps, $offset) {
  // First we need to collect the HSPs to define the ranges we want to
  // display on the GBrowse.
  $ranges = array();
  // We also keep track of all the coordinates in order to later
  // calculate the smallest and largest coordinate.
  $coords = array();
  foreach($hsps as $hsp) {
  
    $start = $offset + min($hsp['Hsp_hit-from'], $hsp['Hsp_hit-to']);
    $stop  = $offset + max($hsp['Hsp_hit-from'], $hsp['Hsp_hit-to']);
    
    // Format the hsp for inclusion in the new track later.
    array_push($ranges, "$start..$stop");
    
    // Add both the start & stop to the coordinate list.
    array_push($coords, $start, $stop);
  }
  
  return array('ranges' => $ranges, 'coords' => $coords);
}//lis_custom_getHSPranges


function lis_custom_getGenePosition($prefix, $hit_name) {
  // Get starting position for gene model
  $sql = "
    SELECT fl.fmin, s.uniquename AS chr FROM {featureloc} fl
      INNER JOIN {feature} f ON f.feature_id=fl.feature_id
      INNER JOIN {feature} s ON s.feature_id=fl.srcfeature_id
    WHERE f.name='$prefix$hit_name'";
  $results = chado_query($sql);
  foreach ($results as $r) {
    return array('start' => $r->fmin, 'chr' => $r->chr);
  }

  // If we get here, the query failed
  return 0;
}//lis_custom_getGenePosition


